
[

    
    {
      "name": "Math Functions",
      "projects": [
        {"id": "4", "name": "Sum of Two Numbers", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Math%20Functions/Sum%20of%20Two%20numbers.jpg.png?raw=true",
        "hints": [
    "Hint 1: Let's start our magic math! Drag out two 'set variable' blocks. Name the first variable a and set it to 10. Can you do the same for the second variable but name it b and set it to 15?",
    "Hint 2: Now, we need a treasure chest to keep our total treasure! Create another variable named c. This will hold the sum of a and b.",
    "Hint 3: Time to add our treasures! Set the variable c to the result of a plus b. Look for the 'math' block that lets you choose an addition operation.",
    "Hint 4: We've done the math, now let's share our result! Use a 'print' block to show everyone what the sum of a and b is.",
    "Hint 5: If the number you see isn’t what you expected, double-check the values you set for a and b. Did you add them correctly in the block for c?"
  ],
  "questions": [
    {
      "questionText": "What happens if you change a and b?",
      "options": ["Nothing changes", "The sum changes", "c becomes zero", "It subtracts"],
      "correctAnswer": "The sum changes"
    }
  ]},

  {
    "id": "4",
    "name": "Exponential Calculator",
    "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Math%20Functions/Exponential%20Calculator.png?raw=true",
    "hints": [
      "Hint 1: Let's start our adventure by creating a powerful spell called power. Can you find a 'define function' block and name it power with two parameters: base and exponent?",
      "Hint 2: In our magical power function, we want to return the result of base raised to the exponent. Use a 'return' block and find the math operation that lets you raise one number to the power of another.",
      "Hint 3: Now, let's prepare our ingredients! Use two 'set variable' blocks to create variables named base and exponent. Set base to 5 and exponent to 4.",
      "Hint 4: Let’s see what happens when we use our spell! Create another variable named result and use our power function to calculate base raised to exponent. Store this magical number in result.",
      "Hint 5: It’s time to reveal our magic! Use a 'print' block to show everyone the result of our power calculation. Add some text to make it clear, like 'Result:'.",
      "Hint 6: If your magic doesn’t work as expected, check the numbers you used. Did you correctly raise base to exponent in your return block? Make sure every block is in its right place!"
    ],
    "questions": [
      {
        "questionText": "What if the exponent is negative?",
        "options": ["Result increases", "Result is fraction", "No change", "Error"],
        "correctAnswer": "Result is fraction"
      }
    ]
  },  

 {"id": "1", 
        "name": "Factorial Calculator", 
        "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Loop%20Functions/Factorial%20Calculator.png?raw=true",
        "hints": [
          "Hint 1: Let's start by defining a magic spell to calculate something special! Drag a 'define function' block and name it factorial. What do you think we're going to calculate?",
          "Hint 2: Every magician needs a wand. Let’s create a 'variable' named result and set it to 1. This will help us keep track of our calculation.",
          "Hint 3: To cast our spell many times, we need a loop. Can you find a loop that counts from 1 up to any number you choose? Place it inside our spell.",
          "Hint 4: Inside the loop, let's make our variable result grow. Multiply result by our loop counter. This is how we build the factorial magic step by step",
          "Hint 5: After our loop finishes all its magic, let’s give back the result of our spell. Use a 'return' block to send the result out of our function.",
          "Hint 6: Now that we’ve defined our spell, let’s see what it can do! Use a 'print' block to show the factorial of 5, 10, and 15. What do these numbers have in common?",
          "Hint 7: If something doesn’t look right, check if your loop goes from 1 up to and including the number we want the factorial of. Also, ensure your 'return' block isn’t inside the loop!"
        ],
        "questions": [
          {
            "questionText": "What does a factorial function compute?",
            "options": ["Sum of numbers", "Product of numbers up to n", "Division of numbers"],
            "correctAnswer": "Product of numbers up to n"
          }
        ]
      },

        {"id": "2", 
        "name": "Power Calculator", 
        "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Loop%20Functions/Power%20Calculator.png?raw=true",
        "hints": [
          "Hint 1: Let’s build a new magic spell called power! Can you drag out a 'define function' block and name it power? We’ll need two ingredients for this spell: base and exponent.",
          "Hint 2: Every powerful spell starts with a small seed. Let's create a 'variable' named result and set it to 1. This tiny seed will grow as we cast our spell.",
          "Hint 3: To repeat our magical growth, we need a loop. Find a loop that can repeat as many times as our exponent says. Place this loop inside our power function.",
          "Hint 4: Inside the loop, let’s multiply our result by the base each time. This is how we build up power step by step. Can you arrange the blocks to make this happen?",
          "Hint 5: After we’ve multiplied enough times, our result holds a lot of power! Let's return this powerful result from our spell. Use a 'return' block to send the result back.",
          "Hint 6: Now that our spell is ready, let’s see what it can do when we give it a small task. Use a 'print' block to show what happens when we calculate the power of 2 raised to 3.",
          "Hint 7: If your spell doesn’t work as expected, check that your loop runs the correct number of times. Remember, the loop index in Python starts at 0!"
        ],
        "questions": [
          {
            "questionText": "Why is 'result' initialized to 1 in the Power Calculator project?",
            "options": ["To enable multiplication", "To avoid division by zero", "To sum powers", "To reset the loop"],
            "correctAnswer": "To enable multiplication"
          }
        ]
      },
        
        {"id": "3", 
        "name": "Prime Number Checker", 
        "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Loop%20Functions/Prime%20Number%20Checker.png?raw=true",
        "hints": [
          "Hint 1: Let's create a detective spell called is_prime that can tell if a number is really, really special! Drag out a 'define function' block and add a parameter named number.",
          "Hint 2: Our first clue in solving the mystery: prime numbers are greater than 1. Can you use an 'if' block to check if the number is less than or equal to 1 and return False if it is?",
          "Hint 3: To find out if a number is prime, we need to check if other numbers can divide it without leaving a remainder. Use a 'for' loop block to repeat from 2 up to the square root of our number. (Hint: use int(number ** 0.5) + 1 for the loop range.)",
          "Hint 4: Inside our loop, let's use another 'if' block to check if our number can be divided evenly by any of these possible divisors. If you find one, return False—that means it's not a prime number.",
          "Hint 5: If our number passes all the checks and the loop finishes without finding divisors, it must be prime! After the loop, use a 'return' block to send back True.",
          "Hint 6: Now, let's test our detective skills! Use 'print' blocks to check if 7 and 10 are prime numbers. What do you think will happen?",
          "Hint 7: If something doesn't work as expected, double-check your loop's range and the conditions inside your 'if' blocks. Make sure you're returning True only after the loop!"
        ],
        "questions": [
          {
            "questionText": "Why check up to the square root when finding primes?",
            "options": ["Sufficient and efficient", "Less complex", "Saves resources", "Checks higher divisors"],
            "correctAnswer": "Sufficient and efficient"
          }]
        },

        {
          "id": "6",
          "name": "Greatest Common Divisor (GCD) Finder",
          "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Math%20Functions/Greatest%20Common%20Divisor%20(GCD)%20Finder.png?raw=true",
          "hints": [
            "Hint 1: Embark on a quest to discover the greatest shared treasure of two realms! Define a function gcd with two brave knights, a and b, who will help us find it.",
            "Hint 2: In our quest, b represents a challenge that continues until it's resolved. Use a 'repeat while' block with the condition b to keep searching as long as there’s more common ground to find.",
            "Hint 3: Inside our loop, a grand exchange takes place! Set a to b and b to a % b. This ancient spell finds the remainder and brings us closer to the greatest common treasure.",
            "Hint 4: Once the challenges cease (b becomes zero), our greatest treasure is found with a. Use a 'return' block to send this treasure back to the kingdom.",
            "Hint 5: Prepare for the quest by declaring the riches each realm holds. Set num1 to 48 and num2 to 18. These are the treasures we'll examine.",
            "Hint 6: With our knights ready and treasures set, let’s invoke the gcd spell! Store the result in result and proclaim it across the lands with a 'print' block.",
            "Hint 7: If the proclamation doesn’t announce the right treasure, ensure your loop exchanges treasures correctly. Remember, the remainder operation guides us to our goal."
          ],
          "questions": [
            {
              "questionText": "What changes with different num1 and num2?",
              "options": ["Nothing", "GCD changes", "Error occurs", "Only num1 affects"],
              "correctAnswer": "GCD changes"
            }
          ]
        }
,        
{
  "id": "7",
  "name": "Triangle Area Calculator",
  "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Math%20Functions/Triangle%20Area%20Calculator.png?raw=true",
  "hints": [
    "Hint 1: Imagine you are an ancient architect tasked with calculating the area for triangular fields. Start by crafting a formula in a function named triangle_area. It needs two measurements: base and height.",
    "Hint 2: To find how much land you can use, multiply the base by the height and then take half of that. Drag out a 'return' block and combine it with a math operation block to perform 0.5 * base * height.",
    "Hint 3: Now, define the dimensions of your triangular field. Use 'set variable' blocks to assign base to 6 and height to 8.",
    "Hint 4: With your measurements ready, use the triangle_area function to calculate the area. Store this valuable information in a variable named area.",
    "Hint 5: Let the world know about your architectural feat! Use a 'print' block to display the area of your triangle. Combine text and variables to make a clear statement like 'Area of the triangle with base 6 and height 8 is'.",
    "Hint 6: If the area looks off, revisit your formula. Did you multiply and divide correctly? Verify each block’s setup to ensure your calculations are accurate."
  ],
  "questions": [
    {
      "questionText": "What if you double the base?",
      "options": ["Same area", "Doubles area", "Triples area", "Quadruples area"],
      "correctAnswer": "Doubles area"
    }
  ]
}

      ]
    },
    {
      "name": "Text functions",
      "projects": [
        {
          "id": "4",
          "name": "Character Count",
          "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Text%20functions/Character%20Count.png?raw=true",
          "hints": [
            "Hint 1: Imagine you're a wizard who can instantly count the letters in any magical incantation. Create a spell (function = def) named character_count. It should take one parameter: text.",
            "Hint 2: Your spell can reveal the power of words by counting them. Use a 'return' block combined with a 'length of' block to find out how many characters the text contains.",
            "Hint 3: Before casting your spell, you must gather the words to examine. Use a 'set variable' block to create a variable named text. Use an 'input' block to ask the user: 'Enter a text:'.",
            "Hint 4: Now, unleash your spell! Use the character_count function to discover the number of characters. Store this mystical number in a variable and display it using a 'print' block.",
            "Hint 5: Tell the world of your wizardry! Print the result with a message saying 'Character count: ', followed by the number you calculated. Make sure your message is informative and clear.",
            "Hint 6: If your count seems off, double-check the text you entered. Did your spell (function) correctly identify every single character, including spaces and punctuation?"
          ],
          "questions": [
            {
              "questionText": "What if only Enter is pressed?",
              "options": ["Counts as 1", "Error", "Count is 0", "App crashes"],
              "correctAnswer": "Count is 0"
            }
          ]
        }
        ,
        {
          "id": "4",
          "name": "Reverse Text",
          "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Text%20functions/Reverse%20Text.png?raw=true",
          "hints": [
            "Hint 1: Imagine you've discovered a magical mirror that can reverse any message shown to it. Create a spell (function) named reverse_text. This spell should have one enchantment (parameter): text.",
            "Hint 2: To reveal the message's hidden form, use the mirror's power by returning the reversed version of text. Remember, the mirror reflects from end to start, so use slicing [::-1].",
            "Hint 3: Before casting the spell, you need a phrase to test. Use a 'set variable' block named text and include an 'input' block to ask the user: 'Enter a text:'. What secrets will they wish to uncover?",
            "Hint 4: Cast your spell by invoking the reverse_text function with the collected phrase. Store the mystical reversed message in a variable and reveal it to the world using a 'print' block.",
            "Hint 5: Share the mirrored message with the realm! Combine the words 'Reversed text: ' with the result of your spell in a print statement. Ensure the message is clear and magical.",
            "Hint 6: If the reflection isn't as expected, peek back through your mirror (review your code). Did you slice the text correctly to reverse it?"
          ],
          "questions": [
            {
              "questionText": "What if input is 'a, b'?",
              "options": ["No change", "Shows 'b, a'", "Error", "Shows ' ,ba'"],
              "correctAnswer": "Shows ' ,ba'"
            }
          ]
        }
        ,
        {
          "id": "5",
          "name": "Text Capitalizer",
          "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Text%20functions/Text%20Capitalizer.png?raw=true",
          "hints": [
            "Hint 1: Imagine you are a renowned scribe in a royal court, tasked with beautifying each word in royal decrees. Forge a function named capitalize_text to transform any text into its most dignified form.",
            "Hint 2: Use the scribe's secret—a powerful spell known as title(). This enchantment capitalizes the initial of each word in the text, turning common sentences into grand titles.",
            "Hint 3: Gather words from the kingdom's folk to demonstrate your skill. Use a 'set variable' block for text and attach an 'input' block to collect phrases with the prompt 'Enter a text:'.",
            "Hint 4: Now, let your quill dance as you invoke the capitalize_text function! Store the refined text in a variable and declare it to all with a 'print' block.",
            "Hint 5: Proclaim the elegance of your craft! Combine 'Capitalized text: ' with the result and use a print statement to share the transformed message.",
            "Hint 6: Should the result display any commoners' letters (uncapitalized words), revisit your scribe’s spell and ensure title() was correctly cast on the entire text."
          ],
          "questions": [
            {
              "questionText": "What if text is all uppercase?",
              "options": ["No change", "All lowercase", "First letters only capitalized", "Error"],
              "correctAnswer": "First letters only capitalized"
            }
          ]
        }
        ,
        {
          "id": "6",
          "name": "Text Repeater",
          "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Text%20functions/Text%20Repeater.png?raw=true",
          "hints": [
            "Hint 1: Imagine stumbling upon a cavern where every whisper is echoed back multiple times. Create a magical function named repeat_text to mimic this echo. It needs two charms: text to repeat and times the number of echoes.",
            "Hint 2: To unleash the cavern's echoes, multiply the text by the times using a multiplication block. This is how you tell the cavern how many echoes to send back.",
            "Hint 3: Before calling upon the echo, gather the phrase to echo and how many times it should resound through the cavern. Use 'set variable' blocks for text and times, attaching 'input' blocks to collect these from the user. Remember, the times needs a number, so convert the input to an integer.",
            "Hint 4: Summon the echoes by invoking the repeat_text function with your collected words and the desired number of repeats. Store the echoing chant in a variable and use a 'print' block to share the magic.",
            "Hint 5: Let the world hear the repeated magic! Use a print statement to announce 'Repeated text: ' followed by the result of your spell.",
            "Hint 6: If the echoes don't reverberate as expected, revisit your spell to check if the multiplication of text by times was correctly set up. Ensure the number of times isn't zero or negative, as that would silence the echoes."
          ],
          "questions": [
            {
              "questionText": "What if times is zero?",
              "options": ["Repeats once", "Error", "No output", "Repeats twice"],
              "correctAnswer": "No output"
            }
          ]
        }
        ,
        {
          "id": "7",
          "name": "Word Count Tool",
          "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Text%20functions/Word%20Count%20Tool.png?raw=true",
          "hints": [
            "Hint 1: Imagine you're a spy decoding messages. Each word might contain clues. Build a decoder function named word_count that takes text as a clue to analyze.",
            "Hint 2: Use the spy's technique of breaking down messages. Split the text into words using the split() method, which separates words at spaces. Store these words in a variable named words.",
            "Hint 3: To find out how many words or clues you have, use the len() function on your list of words. This tells you the total number of words in the text.",
            "Hint 4: Before you can decode, you need a message. Use a 'set variable' block for text and attach an 'input' block to capture the message from the user with the prompt 'Enter a text:'. What secrets will it reveal?",
            "Hint 5: Now that you've captured your message, let's decode it. Invoke the word_count function and store the number of words in a variable. Then use a 'print' block to reveal 'Word count: ' followed by the result.",
            "Hint 6: If your count seems off, check your function. Did you remember to split the text correctly? Make sure spaces are effectively turning the text into separate words."
          ],
          "questions": [
            {
              "questionText": "What if input is all spaces?",
              "options": ["Counts as 1", "Error", "Counts as 0", "App crashes"],
              "correctAnswer": "Counts as 0"
            }
          ]
        }
        
      ]
    },
    {
      "name": "Lists",
      "projects": [
        {
          "id": "4",
          "name": "List Length Calculator",
          "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Lists/List%20Length%20Calculator.png?raw=true",
          "hints": [
            "Hint 1: Imagine you're an explorer counting treasures in a treasure chest. Each item in a list is a treasure. Create a function named list_length that will count these treasures for you.",
            "Hint 2: Use the explorer’s tool, the len() function, to count how many treasures (items) are in your list. This function is like a magic spell that instantly tells you the count of items in any collection.",
            "Hint 3: Prepare your treasure list! Use a 'set variable' block to create my_list and fill it with your treasures, which in this case are the numbers [1, 2, 3, 4, 5].",
            "Hint 4: Now that your treasures are ready, let’s count them. Call the list_length function with my_list as its argument. Store the result in a variable and use a 'print' block to announce the total count.",
            "Hint 5: Show off your counting skills! Use a print statement to declare 'Length of the list: ' followed by the result. It’s a simple yet powerful way to verify your function’s accuracy.",
            "Hint 6: If the number doesn’t match your expected treasure count, double-check your list and ensure len() is applied correctly. It’s like recounting your treasures to make sure none are missed."
          ],
          "questions": [
            {
              "questionText": "What if the list is empty?",
              "options": ["Count is 1", "Error", "Count is 0", "Count is -1"],
              "correctAnswer": "Count is 0"
            }
          ]
        }
        ,
        {"id": "5", "name": "List Summation", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Lists/List%20Summation.png?raw=true"}
      ]
    },
    {
      "name": "Turtle",
      "projects": [
        {"id": "4", "name": "Draw a Circle", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/Draw%20a%20Circle.png?raw=true"},
        {"id": "5", "name": "Draw a Square", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/turtle-square.png?raw=true"},
        {"id": "6", "name": "Draw a Star", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/turtle-square.png?raw=true"},
        {"id": "4", "name": "Draw a Triangle", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/Draw%20a%20Triangle.png?raw=true"},
        {"id": "5", "name": "Draw a Parallelogram", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/Draw%20a%20Parallelogram.png?raw=true"},
        {"id": "6", "name": "Draw a Polygon", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/Draw%20a%20Polygon.png?raw=true"},
        {"id": "4", "name": "Drawing a alphabet A", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/Drawing%20a%20alphabet%20A.png?raw=true"},
        {"id": "5", "name": "Drawing a Concentric Circles", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/Drawing%20a%20Concentric%20Circles.png?raw=true"},
        {"id": "6", "name": "Drawing a Fractal tree", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Turtle/Drawing%20a%20Fractal%20tree.png?raw=true"}
      ]
    },
    {
      "name": "Sorting",
      "projects": [
        {"id": "4", "name": "Sorting Alphabets and Random Numbers", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Sorting/Sorting%20Alphabets%20and%20Random%20Numbers.png?raw=true"},
        {"id": "5", "name": "Sorting by length", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Sorting/Sorting%20by%20length.png?raw=true"},
        {"id": "6", "name": "Bubble Sort", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/Bubble%20Sort.png?raw=true"},
        {"id": "7", "name": "Sorting List of Tuples by Second Element", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/Sorting%20List%20of%20Tuples%20by%20Second%20Element.png?raw=true"}
      ]
    },
    {
      "name": "Plotting",
      "projects": [
        {"id": "4", "name": "Finding the average length of the String in the list", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/Finding%20the%20average%20length%20of%20the%20String%20in%20the%20list.png?raw=true"},
        {"id": "5", "name": "Plotting line graph using NUMPY AND MATPLOTLIB", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/PLOTTING%20LINE%20GRAPH%20USING%20NUMPY%20AND%20MATPLOTLIB.png?raw=true"},
        {"id": "6", "name": "Plot the Sine Function", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/Plot%20the%20Sine%20Function.png?raw=true"},
        {"id": "7", "name": "Reversing the array", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/Reversing%20the%20array.png?raw=true"},
        {"id": "4", "name": "simple line plot", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/simple%20line%20plot.png?raw=true"},
        {"id": "4", "name": "two subplots in a single figure", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Plotting/two%20subplots%20in%20a%20single%20figure.png?raw=true"}
      ]
    },
    {
      "name": "Numpy",
      "projects": [
        {"id": "4", "name": "Arranging the elements within the range", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Numpy/Arranging%20the%20elements%20within%20the%20range.png?raw=true"},
        {"id": "5", "name": "Creating and accesing elements of Numpy Array", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Numpy/Creating%20and%20accesing%20elements%20of%20Numpy%20Array.png?raw=true"},
        {"id": "6", "name": "Linspace in Numpy", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Numpy/Linspace%20in%20Numpy.png?raw=true"},
        {"id": "7", "name": "Print Sum,Min,Max and Index of max Value", "image": "https://github.com/mohamedarsath18/pyprojects/blob/main/Numpy/Print%20Sum,Min,Max%20and%20Index%20of%20max%20Value.png?raw=true"}
      ]
    }
  ]
  